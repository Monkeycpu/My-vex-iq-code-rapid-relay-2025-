{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nleft_drive_smart = Motor(Ports.PORT6, 1.0, True)\nright_drive_smart = Motor(Ports.PORT12, 1.0, False)\ndrivetrain_gyro = Gyro(Ports.PORT10)\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, drivetrain_gyro, 160)\ncontroller = Controller()\nIntakeMotor = Motor(Ports.PORT8, False)\nCatapultGroup_motor_a = Motor(Ports.PORT1, False)\nCatapultGroup_motor_b = Motor(Ports.PORT7, True)\nCatapultGroup = MotorGroup(CatapultGroup_motor_a, CatapultGroup_motor_b)\ntouchled_9 = Touchled(Ports.PORT9)\n\n\n\n# generating and setting random seed\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    xaxis = brain_inertial.acceleration(XAXIS) * 1000\n    yaxis = brain_inertial.acceleration(YAXIS) * 1000\n    zaxis = brain_inertial.acceleration(ZAXIS) * 1000\n    systemTime = brain.timer.system() * 100\n    urandom.seed(int(xaxis + yaxis + zaxis + systemTime)) \n    \n# Initialize random seed \ninitializeRandomSeed()\n\nvexcode_initial_drivetrain_calibration_completed = False\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Gyro\n    global vexcode_initial_drivetrain_calibration_completed\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Gyro\")\n    drivetrain_gyro.calibrate(GyroCalibrationType.NORMAL)\n    while drivetrain_gyro.is_calibrating():\n        sleep(25, MSEC)\n    vexcode_initial_drivetrain_calibration_completed = True\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n\n# Calibrate the Drivetrain\ncalibrate_drivetrain()\n\n\n\n# define variables used for controlling motors based on controller inputs\ncontroller_left_shoulder_control_motors_stopped = True\ndrivetrain_needs_to_be_stopped_controller = False\n\n# define a task that will handle monitoring inputs from controller\ndef rc_auto_loop_function_controller():\n    global drivetrain_needs_to_be_stopped_controller, controller_left_shoulder_control_motors_stopped, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            \n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axisA + axisB\n            # right = axisA - axisB\n            drivetrain_left_side_speed = controller.axisA.position() + controller.axisB.position()\n            drivetrain_right_side_speed = controller.axisA.position() - controller.axisB.position()\n            \n            # check if the values are inside of the deadband range\n            if abs(drivetrain_left_side_speed) < 5 and abs(drivetrain_right_side_speed) < 5:\n                # check if the motors have already been stopped\n                if drivetrain_needs_to_be_stopped_controller:\n                    # stop the drive motors\n                    left_drive_smart.stop()\n                    right_drive_smart.stop()\n                    # tell the code that the motors have been stopped\n                    drivetrain_needs_to_be_stopped_controller = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the motors next\n                # time the input is in the deadband range\n                drivetrain_needs_to_be_stopped_controller = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_needs_to_be_stopped_controller:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_needs_to_be_stopped_controller:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n            # check the buttonLUp/buttonLDown status\n            # to control IntakeMotor\n            if controller.buttonLUp.pressing():\n                IntakeMotor.spin(FORWARD)\n                controller_left_shoulder_control_motors_stopped = False\n            elif controller.buttonLDown.pressing():\n                IntakeMotor.spin(REVERSE)\n                controller_left_shoulder_control_motors_stopped = False\n            elif not controller_left_shoulder_control_motors_stopped:\n                IntakeMotor.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_left_shoulder_control_motors_stopped = True\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller = Thread(rc_auto_loop_function_controller)\n\n#endregion VEXcode Generated Robot Configuration\n\nvexcode_brain_precision = 0\nvexcode_console_precision = 0\nmyVariable = 0\ncatipult = False\n\ndef when_started1():\n    global myVariable, catipult, vexcode_brain_precision, vexcode_console_precision\n    drivetrain.set_drive_velocity(225, PERCENT)\n    drivetrain.set_turn_velocity(20039, PERCENT)\n    CatapultGroup.set_max_torque(150, PERCENT)\n    CatapultGroup.set_velocity(150, PERCENT)\n    IntakeMotor.set_velocity(150, PERCENT)\n    brain.screen.print(\"Nanoshork\")\n    touchled_9.set_color(Color.PURPLE)\n\ndef onevent_touchled_9_pressed_0():\n    global myVariable, catipult, vexcode_brain_precision, vexcode_console_precision\n    brain.play_sound(SoundType.TOLLBOOTH)\n    brain.play_sound(SoundType.TOLLBOOTH)\n    touchled_9.set_color(Color.PURPLE)\n\ndef onevent_controllerbuttonRDown_pressed_0():\n    global myVariable, catipult, vexcode_brain_precision, vexcode_console_precision\n    catipult = True\n    CatapultGroup.spin(REVERSE)\n    wait(2.2, SECONDS)\n    CatapultGroup.stop()\n\ndef onevent_controllerbuttonEUp_pressed_0():\n    global myVariable, catipult, vexcode_brain_precision, vexcode_console_precision\n    for repeat_count in range(5):\n        brain.play_sound(SoundType.WRONG_WAY)\n        wait(20, MSEC)\n\ndef onevent_controllerbuttonFUp_pressed_0():\n    global myVariable, catipult, vexcode_brain_precision, vexcode_console_precision\n    catipult = False\n    CatapultGroup.spin(FORWARD)\n    wait(1, SECONDS)\n\n# system event handlers\ntouchled_9.pressed(onevent_touchled_9_pressed_0)\ncontroller.buttonRDown.pressed(onevent_controllerbuttonRDown_pressed_0)\ncontroller.buttonEUp.pressed(onevent_controllerbuttonEUp_pressed_0)\ncontroller.buttonFUp.pressed(onevent_controllerbuttonFUp_pressed_0)\n# add 15ms delay to make sure events are registered correctly.\nwait(15, MSEC)\n\nwhen_started1()\n","textLanguage":"python","robotConfig":[{"port":[6,12,10],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"160mm","gearRatio":"1:1","direction":"rev","gyroType":"smart","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[],"name":"controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"IntakeMotor","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"arcadel"},"triportSourcePort":22},{"port":[8],"name":"IntakeMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"intake","rev":"outtake"},"triportSourcePort":22},{"port":[1,7],"name":"CatapultGroup","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"lower","rev":"release","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[9],"name":"touchled_9","customName":false,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"4.0.10","minVersion":"3.0.0","fileFormat":"2.0.0","targetBrainGen":"Second","v5SoundsEnabled":false,"target":"Physical"}